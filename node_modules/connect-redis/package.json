{
  "name": "connect-redis",
  "description": "Redis session store for Connect",
  "version": "2.2.0",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:visionmedia/connect-redis.git"
  },
  "dependencies": {
    "debug": "^1.0.4",
    "redis": "^0.12.1"
  },
  "devDependencies": {
    "blue-tape": "^0.1.8",
    "bluebird": "^2.3.2",
    "eslint": "^0.9.2",
    "express-session": "^1.9.1",
    "istanbul": "^0.3.2",
    "tape": "^3.0.3"
  },
  "engines": {
    "node": "*"
  },
  "bugs": {
    "url": "https://github.com/visionmedia/connect-redis/issues"
  },
  "scripts": {
    "test": "DEBUG=* istanbul cover tape \"test/*-test.js\"",
    "bench": "node bench/redisbench.js",
    "lint": "eslint --reset index.js test lib bench"
  },
  "readme": "# Connect Redis\n\nconnect-redis is a Redis session store backed by [node_redis](http://github.com/mranney/node_redis), and is insanely fast :). Requires redis >= `2.0.0` for the _SETEX_ command.\n\n## Installation\n\n    $ npm install connect-redis\n\n### A note for Express 3.x users\n\nIn order to use the latest `connect-redis` you also have to use [`express-session`](https://github.com/expressjs/session) instead of the default connect `session` middleware.\n\n    $ npm install express-session\n\nThen follow the usage instructions below.\n\n## Options\n\n  A Redis client is required.  An existing client can be passed directly using the `client` param or created for you using the `host`, `port`, or `socket` params.\n  - `client` An existing client created using `redis.createClient()`\n  - `host` Redis server hostname\n  - `port` Redis server portno\n  - `socket` Redis server unix_socket\n\nThe following additional params may be included:\n\n  - `ttl` Redis session TTL (expiration) in seconds\n  - `disableTTL` disables setting TTL, keys will stay in redis until evicted by other means (overides `ttl`)\n  - `db` Database index to use\n  - `pass` Password for Redis authentication\n  - `prefix` Key prefix defaulting to \"sess:\"\n  - `unref` Set `true` to unref the Redis client. **Warning**: this is [an experimental feature](https://github.com/mranney/node_redis#clientunref).\n\nAny options not included in this list will be passed to the redis `createClient()` method directly.\n\n## Usage\n\nPass the `express-session` store into `connect-redis` to create a `RedisStore` constructor.\n\n    var session = require('express-session');\n    var RedisStore = require('connect-redis')(session);\n\n    app.use(session({\n        store: new RedisStore(options),\n        secret: 'keyboard cat'\n    }));\n\n## FAQ\n\n#### Can I use a URL scheme to make a connection?\n\nSince `node_redis` which this library wraps does not include the ability to create a client from a URL.  Neither does this library.  However, there's a [separate module](https://github.com/ddollar/redis-url) that can be used in conjunction to get this behavior.\n\n#### How do I handle lost connections to Redis?\n\nBy default, the `node_redis` client will [auto-reconnect](https://github.com/mranney/node_redis#overloading) when a connection is lost.  But requests may come in during that time. In express, one way this scenario can be handled is including a \"session check\" after setting up a session (checking for the existence of `req.session`):\n\n```js\napp.use(session( /* setup session here */ ))\napp.use(function (req, res, next) {\n  if (!req.session) {\n    return next(new Error('oh no')) // handle error\n  }\n  next() // otherwise continue\n})\n```\n\nIf you want to retry, here is [another option](https://github.com/expressjs/session/issues/99#issuecomment-63853989).\n\n# License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "_id": "connect-redis@2.2.0",
  "_from": "connect-redis@2.x"
}
