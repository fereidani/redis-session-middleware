{"name":"Redis-session-middleware","tagline":"Krakenjs express-session redis middleware","body":"# redis-session-middleware\r\nKrakenjs/Expressjs redis session middleware\r\n\r\nThe \"redis-session-middleware\" is a middleware for Expressjs 4.x/Kraken 1.x to use express-session with redis compatibility .\r\n\r\n### How to install :\r\n\r\nmake a directory in root of your application and call it middleware .\r\nclone project in it .\r\ngo to directory and run npm install .\r\n\r\n##### if you use Kraken :\r\n1. open `config/config.json`\r\n2. replace old `session` part or add a following part to \"middleware\" index :\r\n```\r\n        \"session\": {\r\n            \"module\": {\r\n                \"name\": \"../../../middleware/redis-session-middleware\",\r\n                \"arguments\": [\r\n                    {\r\n                        \"secret\":\"hello world!!\"\r\n                    },\r\n                    {\r\n                        \"db\":10\r\n                    },\r\n                    {\r\n                        \"defaultError\":\"Redis Connection Timeout/Problem !\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n```\r\n3. edit config parammeters according to your needs as explained in next section.\r\n\r\n##### if you use Express :\r\n\r\n* use this code in your app with your discretion :\r\n```\r\n var reddisSessionMiddleware=require('./middleware/redis-session-middleware/')(\r\n                    {\r\n                        \"secret\":\"hello world!!\"\r\n                    },\r\n                    {\r\n                        \"db\":10\r\n                    },\r\n                    {\r\n                        \"defaultError\":\"Redis Connection Timeout/Problem !\"\r\n                    });\r\napp.use(reddisSessionMiddleware);\r\n```\r\n** you can edit config arguments as explained in next section .\r\n\r\n\r\n### Config Parameters :\r\n\r\n* Please notice module will work fine with default install of redis and default config , but it's highly recommended to change at least \"secret\" value and personalise your config file .\r\n\r\n1. first parameter is express-session settings\r\n2. second parameter is connect-redis , it contains redis connection settings .\r\n3. third parameter is private settings of redis-session-middleware\r\n\r\n\r\n#### express-session settings :\r\n\r\n**Note** session data is _not_ saved in the cookie itself, just the session ID.\r\nSession data is stored server-side.\r\n\r\n##### cookie\r\n\r\nSettings for the session ID cookie. See the \"Cookie options\" section below for\r\nmore information on the different values.\r\n\r\nThe default value is `{ path: '/', httpOnly: true, secure: false, maxAge: null }`.\r\n\r\n##### name\r\n\r\nThe name of the session ID cookie to set in the response (and read from in the\r\nrequest).\r\n\r\nThe default value is `'skyport'`.\r\n\r\n##### proxy\r\n\r\nTrust the reverse proxy when setting secure cookies (via the \"X-Forwarded-Proto\"\r\nheader).\r\n\r\nThe default value is `undefined`.\r\n\r\n  - `true` The \"X-Forwarded-Proto\" header will be used.\r\n  - `false` All headers are ignored and the connection is considered secure only\r\n    if there is a direct TLS/SSL connection.\r\n  - `undefined` Use the \"trust proxy\" setting from express\r\n\r\n##### resave\r\n\r\nForces the session to be saved back to the session store, even if the session\r\nwas never modified during the request. Depending on your store this may be\r\nnecessary, but it can also create race conditions where a client has two\r\nparallel requests to your server and changes made to the session in one\r\nrequest may get overwritten when the other request ends, even if it made no\r\nchanges (this behavior also depends on what store you're using).\r\n\r\nThe default value is `true`, but using the default has been deprecated,\r\nas the default will change in the future. Please research into this setting\r\nand choose what is appropriate to your use-case. Typically, you'll want\r\n`false`.\r\n\r\n##### rolling\r\n\r\nForce a cookie to be set on every response. This resets the expiration date.\r\n\r\nThe default value is `false`.\r\n\r\n##### saveUninitialized\r\n\r\nForces a session that is \"uninitialized\" to be saved to the store. A session is\r\nuninitialized when it is new but not modified. Choosing `false` is useful for\r\nimplementing login sessions, reducing server storage usage, or complying with\r\nlaws that require permission before setting a cookie. Choose `false` will also\r\nhelp with race conditions where a client makes multiple parallel requests\r\nwithout a session.\r\n\r\nThe default value is `true`, but using the default has been deprecated, as the\r\ndefault will change in the future. Please research into this setting and\r\nchoose what is appropriate to your use-case.\r\n\r\n**Note** if you are using Session in conjunction with PassportJS, Passport\r\nwill add an empty Passport object to the session for use after a user is\r\nauthenticated, which will be treated as a modification to the session, causing\r\nit to be saved.\r\n\r\n##### secret\r\n\r\n**Required option**\r\n\r\nThis is the secret used to sign the session ID cookie.\r\n\r\n##### store\r\n\r\ndeprecated - you can't use it in this module .\r\n\r\n##### unset\r\n\r\nControl the result of unsetting `req.session` (through `delete`, setting to `null`,\r\netc.).\r\n\r\nThe default value is `'keep'`.\r\n\r\n  - `'destroy'` The session will be destroyed (deleted) when the response ends.\r\n  - `'keep'` The session in the store will be ketp, but modifications made during\r\n    the request are ignored and not saved.\r\n\r\n#### Cookie options\r\n\r\nPlease note that `secure: true` is a **recommended** option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies.\r\nIf `secure` is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using `secure: true`, you need to set \"trust proxy\" in express:\r\n\r\n```js\r\nvar app = express()\r\napp.set('trust proxy', 1) // trust first proxy\r\napp.use(session({\r\n  secret: 'keyboard cat',\r\n  resave: false,\r\n  saveUninitialized: true,\r\n  cookie: { secure: true }\r\n}))\r\n```\r\n\r\nFor using secure cookies in production, but allowing for testing in development, the following is an example of enabling this setup based on `NODE_ENV` in express:\r\n\r\n```js\r\nvar app = express()\r\nvar sess = {\r\n  secret: 'keyboard cat',\r\n  cookie: {}\r\n}\r\n\r\nif (app.get('env') === 'production') {\r\n  app.set('trust proxy', 1) // trust first proxy\r\n  sess.cookie.secure = true // serve secure cookies\r\n}\r\n\r\napp.use(session(sess))\r\n```\r\n\r\nBy default `cookie.maxAge` is `null`, meaning no \"expires\" parameter is set\r\nso the cookie becomes a browser-session cookie. When the user closes the\r\nbrowser the cookie (and session) will be removed.\r\n\r\n#### connect-redis settings :\r\n\r\n* You don't need to change these settings in many use cases .\r\n\r\n  A Redis client is required.  An existing client can be passed directly using the `client` param or created for you using the `host`, `port`, or `socket` params.\r\n  - `client` An existing client created using `redis.createClient()`\r\n  - `host` Redis server hostname\r\n  - `port` Redis server portno\r\n  - `socket` Redis server unix_socket\r\n\r\nThe following additional params may be included:\r\n\r\n  - `ttl` Redis session TTL (expiration) in seconds\r\n  - `disableTTL` disables setting TTL, keys will stay in redis until evicted by other means (overides `ttl`)\r\n  - `db` Database index to use\r\n  - `pass` Password for Redis authentication\r\n  - `prefix` Key prefix defaulting to \"sess:\"\r\n  - `unref` Set `true` to unref the Redis client. **Warning**: this is [an experimental feature](https://github.com/mranney/node_redis#clientunref).\r\n\r\n\r\n#### redis-session-middleware settings :\r\n\r\nThe following additional params may be included :\r\n- `defaultError` : it's possible that redis connection failed sometimes because of any expected reason ( timeout , io problems and etc )\r\n                   to avoid execution of user request without successfully receiving session data , this module throw a error in these cases .\r\n                   this field define error message that will show/log when these cases happened .\r\n\r\n\r\n\r\n### Usage sample :\r\n\r\n\r\n```\r\napp.get('/khashayar',function(req,res){\r\n      req.session.name=\"khashayar\";\r\n      if(req.session.counter){\r\n        req.session.counter++;\r\n      }else{\r\n        req.session.counter=1;\r\n      }\r\n      res.send(\"Current Counter Value Of Your Session is \"+req.session.counter);\r\n});\r\n```\r\n\r\nfor better performance and readability it's adviced to use session like this :\r\n\r\n```\r\nvar sess=req.session;\r\nsess.name=\"khashayar\";\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}